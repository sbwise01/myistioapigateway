---
openapi: "3.0.1"
info:
  description: "API for Bookinfo"
  version: "2020-04-08T15:04:47Z"
  title: "Bookinfo-API-gateway"
paths:
  /patient/{testId}/survey:
    get:
      summary: "Get survey page"
      description: "Get survey page"
      parameters:
      - in: path
        name: testId
        required: true
        schema:
          type: string
          description: "Test id for the survey"
      - name: "Host"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "SUCCESS"
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "https://${OriginName}/patient/{testId}/survey"
        responses:
          "200":
            statusCode: "200"
        requestParameters:
          integration.request.path.testId: "method.request.path.testId"
          integration.request.header.Host: "method.request.header.Host"
          integration.request.header.MyIstioHost: "method.request.header.Host"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${VPCLinkId}"
        httpMethod: "GET"
        timeoutInMillis: 29000
        type: "http_proxy"
  /patient:
    get:
      summary: "Get patient page"
      description: "Get patient page"
      parameters:
      - name: "Host"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "SUCCESS"
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "https://${OriginName}/patient"
        responses:
          "200":
            statusCode: "200"
        requestParameters:
          integration.request.header.Host: "method.request.header.Host"
          integration.request.header.MyIstioHost: "method.request.header.Host"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${VPCLinkId}"
        httpMethod: "GET"
        timeoutInMillis: 29000
        type: "http_proxy"
  /fake:
    get:
      summary: "Get patient page"
      description: "Get patient page"
      parameters:
      - name: "Host"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "SUCCESS"
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "https://${OriginName}/fake"
        responses:
          "200":
            statusCode: "200"
        requestParameters:
          integration.request.header.Host: "method.request.header.Host"
          integration.request.header.MyIstioHost: "method.request.header.Host"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${VPCLinkId}"
        httpMethod: "GET"
        timeoutInMillis: 29000
        type: "http_proxy"
  /testprofile:
    get:
      summary: "Get testprofile page"
      description: "Get testprofile page"
      parameters:
      - name: "Host"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "SUCCESS"
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "https://${OriginName}/testprofile"
        responses:
          "200":
            statusCode: "200"
        requestParameters:
          integration.request.header.Host: "method.request.header.Host"
          integration.request.header.MyIstioHost: "method.request.header.Host"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${VPCLinkId}"
        httpMethod: "GET"
        timeoutInMillis: 29000
        type: "http_proxy"
  /productpage:
    get:
      summary: "Get product page"
      description: "Get product page"
      parameters:
      - name: "Host"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "SUCCESS"
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "https://${OriginName}/productpage"
        responses:
          "200":
            statusCode: "200"
        requestParameters:
          integration.request.header.Host: "method.request.header.Host"
          integration.request.header.MyIstioHost: "method.request.header.Host"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${VPCLinkId}"
        httpMethod: "GET"
        timeoutInMillis: 29000
        type: "http_proxy"
  /static:
    get:
      parameters:
        - name: folder
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            Content-Length:
              schema:
                type: string
            Date:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "400":
          description: 400 response
        "500":
          description: 500 response
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: ${S3RoleArn}
        responses:
          "4\\d{2}":
            statusCode: "400"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.content-length
          "5\\d{2}":
            statusCode: "500"
        requestParameters:
          integration.request.path.bucket: method.request.path.folder
        uri: arn:aws:apigateway:${Region}:s3:path/${WebBucketName}/index.html
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws
  /static/images/{item}:
    get:
      parameters:
        - name: item
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            content-type:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
        "400":
          description: 400 response
        "500":
          description: 500 response
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: ${S3RoleArn}
        responses:
          "4\\d{2}":
            statusCode: "400"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.content-type: integration.response.header.content-type
              method.response.header.Content-Type: integration.response.header.Content-Type
          "5\\d{2}":
            statusCode: "500"
        requestParameters:
          integration.request.path.object: method.request.path.item
        uri: arn:aws:apigateway:${Region}:s3:path/${WebBucketName}/images/{object}
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws

components:
  schemas:
    Empty:
      type: "object"
      title: "Empty Schema"

x-amazon-apigateway-binary-media-types:
- "UTF-8-encoded"